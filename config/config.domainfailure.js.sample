clientConfig.PLUGINS_CONFIG["failureH2O"] = {
	pluginLayers: ['a_esercizio.etichette_tratte'],
	pluginDOMElements: [
		{
			type:'div',
            		id: 'map-toolbar-pipeselect-commander',
			parent: 'map-toolbars',
			class: ['olToolbarsControl']
        	}
	],
	pluginComponents: ['gisclient-maps_failure:failureControl:3:mtools'],
	pluginClientConfig: {
	 	OPTIONS_LIST: [],	
        DOMAIN_FAILURE : 'Acqua',
		RETELABEL_FAILURE : ["condotta"],
		TERMINALELABEL_FAILURE : ["utenza","scarico", "idrante"],
		TEMP_STROKECOLOR : "#C9A8FF",
		OFFSET: 50,
		CUSTOM_CONTROLS : [],
		VALVOLA_STYLE: function() {
			valvoleStyle = new OpenLayers.Style();
			valvoleStyle.addRules([
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Comparison({
						type: OpenLayers.Filter.Comparison.EQUAL_TO,
						property: "escluso",
						value: 0
					}),
					symbolizer: {
						strokeColor: "#00FF00",//verdino
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid", 
						pointRadius: 10,
						pointerEvents: "visiblePainted",
						cursor: "inherit",
				}}), 
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Comparison({
						type: OpenLayers.Filter.Comparison.EQUAL_TO,
						property: "simbolo",
						value: "ut"
					}),
					symbolizer: {
						fillColor: "grey",
						strokeColor: "black",
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid",
						pointRadius: 10,
						cursor: "inherit"
				}}),
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Comparison({
						type: OpenLayers.Filter.Comparison.EQUAL_TO,
						property: "simbolo",
						value: "sc"
					}),
					symbolizer: {
						fillColor: "grey",
						strokeColor: "green",
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid",
						pointRadius: 10,
						cursor: "inherit"
					}}),
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Comparison({
						type: OpenLayers.Filter.Comparison.EQUAL_TO,
						property: "simbolo",
						value: "idr"
					}),
					symbolizer: {
						fillColor: "grey",
						strokeColor: "yellow",
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid",
						pointRadius: 10,
						cursor: "inherit"
					}}),
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Logical({
						filters: [
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "escluso",
								value: 0
							}),
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "simbolo",
								value: "v"
							})],
							type: OpenLayers.Filter.Logical.AND}),
					symbolizer: {
						strokeColor: "blue",//verdino
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid", 
						pointRadius: 10,
						pointerEvents: "visiblePainted",
						cursor: "inherit",
	      					graphicName: "x"
	    				}}),
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Logical({
						filters: [
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "escluso",
								value: 1
							}),
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "simbolo",
								value: "v"
							})],
						type: OpenLayers.Filter.Logical.AND}),
					symbolizer: {
						strokeColor: "red",
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid", 
						pointRadius: 10,
						pointerEvents: "visiblePainted",
						cursor: "inherit",
						graphicName: "x"
					}}),
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Logical({
						filters: [
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "escluso",
								value: 0
							}),
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "simbolo",
								value: "so"
							})],
						type: OpenLayers.Filter.Logical.AND}),
					symbolizer: {
						strokeColor: "#ff00ff",//verdino
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid", 
						pointRadius: 10,
						pointerEvents: "visiblePainted",
						cursor: "inherit",
						graphicName: "square"
					}//aggiungere i simboli degli elementi che mancano
				}),
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Logical({
						filters: [
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "escluso",
								value: 1
							}),
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "simbolo",
								value: "so"
							})],
							type: OpenLayers.Filter.Logical.AND}),
					symbolizer: {
						strokeColor: "red",//verdino
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid", 
						pointRadius: 10,
						pointerEvents: "visiblePainted",
						cursor: "inherit",
						graphicName: "square"
					}//aggiungere i simboli degli elementi che mancano
				}),
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Logical({
						filters: [
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "escluso",
								value: 0
							}),
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "simbolo",
								value: "se"
							})],
						type: OpenLayers.Filter.Logical.AND}),
					symbolizer: {
						strokeColor: "#ff00ff",//verdino
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid", 
						pointRadius: 10,
						pointerEvents: "visiblePainted",
						cursor: "inherit",
						graphicName: "triangle"
					}//aggiungere i simboli degli elementi che mancano
				}),
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Logical({
						filters: [
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "escluso",
								value: 1
							}),
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "simbolo",
								value: "se"
							})],
						type: OpenLayers.Filter.Logical.AND}),
					symbolizer: {
						strokeColor: "red",//verdino
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid", 
						pointRadius: 10,
						pointerEvents: "visiblePainted",
						cursor: "inherit",
						graphicName: "triangle"
					}//aggiungere i simboli degli elementi che mancano
				}),
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Logical({
						filters: [
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "escluso",
								value: 0
							}),
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "simbolo",
								value: "sll"
							})],
						type: OpenLayers.Filter.Logical.AND}),
					symbolizer: {
						strokeColor: "#ff00ff",//verdino
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid", 
						pointRadius: 10,
						pointerEvents: "visiblePainted",
						cursor: "inherit",
						graphicName: "cross"
					}//aggiungere i simboli degli elementi che mancano
				}),
				new OpenLayers.Rule({
					filter: new OpenLayers.Filter.Logical({
						filters: [
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "escluso",
								value: 1
							}),
							new OpenLayers.Filter.Comparison({
								type: OpenLayers.Filter.Comparison.EQUAL_TO,
								property: "simbolo",
								value: "sll"
							})],
						type: OpenLayers.Filter.Logical.AND}),
					symbolizer: {
						strokeColor: "red",//verdino
						strokeOpacity: 1,
						strokeWidth: 4,
						strokeLinecap: "round",
						strokeDashstyle: "solid", 
						pointRadius: 10,
						pointerEvents: "visiblePainted",
						cursor: "inherit",
						graphicName: "cross"
					}//aggiungere i simboli degli elementi che mancano
				})
			]);
			return valvoleStyle;
		},
		JSON_INPUT: function(resultFeatures, index) {
			return [];
		}
	}
}
